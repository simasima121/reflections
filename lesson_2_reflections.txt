1) What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, it creates a .git file in the repository. This is needed so that you can make commits for that file.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is different because it allows files to be grouped together and committed all at once rather than individual commits for each file going through singularly. This gives more flexibility on the commits and accuracy.

3) How can you use the staging area to make sure you have one commit per logical change?

Add files to the staging area, then use git diff --staged to see what has changed between the commit you've added and the commit that has been changed. If there is a logical change, then add otherwise do not!

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful in situations where I want to test new features that are not core or change language, maybe make game easier etc but do not affect core code and so I don't want to change the core code! Branches help because they allow me to develop the code on a branch and determine whether or not I think its good, then if I do i can commit and make the change across the whole app.

New branch for every feature or bug-fix, then update master or combine with current master with git merge

5) How do the diagrams help you visualize the branch structure?
	
Helps visualize the branch structure because shows which commit is most recent, what branch they are on and whether they will be saved or not depending on if a commit has happened!

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging 2 branches together is the branch merges with the master and becomes one branch/master. The file then has all the code from both commits which are listed by time variable! We represent it like that because it is easy to read.

7) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros of auto merging is that saves time and is not annoying. Con is that it might delete something important etc.
Pro of manually merging is that something odd to git will seem obvious to you so can easily commit correct thing. Con is that annoying